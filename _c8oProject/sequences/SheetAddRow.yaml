comment: Get a range of cells from a Google Sheet.
↓GetTokenFromUserSession [steps.SessionGetStep-1607870066648]: 
  key: oAuthAccessTokenGoogle
  output: false
↓jSimpleSource [steps.SimpleSourceStep-1607870066651]: 
  sourceDefinition: 
    - xmlizable: 
      - ↑classname: com.twinsoft.convertigo.beans.common.XMLVector
      - com.twinsoft.convertigo.beans.common.XMLVector: 
        - java.lang.String: 
          - ↑value: 1607870066648
        - java.lang.String: 
          - ↑value: ./expression/text()
  variableName: gCreds
↓AddRow [steps.SimpleStep-1607870066654]: 
  expression: |
    ' var GSheetAPI = JavaImporter(
      com.google.api.client.auth.oauth2.Credential,
      com.google.api.client.extensions.java6.auth.oauth2.AuthorizationCodeInstalledApp,
      com.google.api.client.extensions.jetty.auth.oauth2.LocalServerReceiver,
      com.google.api.client.googleapis.auth.oauth2.GoogleAuthorizationCodeFlow,
      com.google.api.client.googleapis.auth.oauth2.GoogleClientSecrets,
      com.google.api.client.googleapis.javanet.GoogleNetHttpTransport,
      com.google.api.client.http.javanet.NetHttpTransport,
      com.google.api.client.json.JsonFactory,
      com.google.api.client.json.jackson2.JacksonFactory,
      com.google.api.client.util.store.FileDataStoreFactory,
      com.google.api.services.sheets.v4.Sheets,
      com.google.api.services.sheets.v4.SheetsScopes,
      com.google.api.services.sheets.v4.model.ValueRange,
      com.google.api.client.googleapis.auth.oauth2.GoogleCredential,
    
      java.io.FileNotFoundException,
      java.io.IOException,
      java.io.InputStream,
      java.io.ByteArrayInputStream,
      java.io.InputStreamReader,
      java.security.GeneralSecurityException,
      java.util.Collections,
      java.util.List
    );
    
    with (GSheetAPI) {
    	APPLICATION_NAME = "Convertigo Form Builder";
    	JSON_FACTORY = JacksonFactory.getDefaultInstance();	
        HTTP_TRANSPORT = GoogleNetHttpTransport.newTrustedTransport();
    
    	credential = new GoogleCredential().setAccessToken(gCreds);
    	
    	service = new Sheets.Builder(HTTP_TRANSPORT, JSON_FACTORY, credential)
            .setApplicationName("Convertigo Form Builder")
            .build();
    
    	setError = null;
    
    	try {
    		response = service.spreadsheets().values()
    	        .get(SheetID, Range)
    	        .execute();
    		
    	    values = response.getValues();
    	    if (values == null || values.isEmpty()) {
    			log.warn("[Google Sreadsheet Connector] no data found");
    	    } else {
    			rows = values.toArray();
    	    }
    	} catch (error) {
    		setError = error;
    		log.error("[Google Sreadsheet Connector] Error occured " + error);				
    	}
    }
    '
↓jIfThenElse [steps.IfThenElseStep-1607870066657]: 
  condition: setError != null
  ↓jThen [steps.ThenStep-1607870066660]: 
    ↓Error_structure [steps.XMLErrorStep-1607870066663]: 
      details: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: JS
            - →→: setError
      message: 
        - xmlizable: 
          - ↑classname: com.twinsoft.convertigo.beans.steps.SmartType
          - SmartType: 
            - ↑mode: PLAIN
            - →→: GoogleSheet connector error
  ↓jElse [steps.ElseStep-1607870066666]: 
    ↓Complex [steps.XMLComplexStep-1607870066669]: 
      nodeName: sheet
      ↓Complexh [steps.XMLComplexStep-1607870066672]: 
        nodeName: columns
        ↓Attribute [steps.XMLAttributeStep-1607870066675]: 
          nodeName: type
          nodeText: array
        ↓jIterator [steps.SimpleIteratorStep-1607870066678]: 
          expression: rows[0]
          ↓Complex [steps.XMLComplexStep-1607870066681]: 
            nodeName: def
            ↓Attribute [steps.XMLAttributeStep-1607870066684]: 
              nodeName: type
              nodeText: object
            ↓jElement [steps.ElementStep-1607870066687]: 
              expression: 'FirstRowHeader ? item : "col" + index'
              nodeName: field
      ↓Complex [steps.XMLComplexStep-1607870066690]: 
        nodeName: data
        ↓Attribute [steps.XMLAttributeStep-1607870066693]: 
          nodeName: type
          nodeText: array
        ↓jIterator [steps.SimpleIteratorStep-1607870066696]: 
          expression: rows
          startIndex: 'FirstRowHeader ? 1: 0'
          ↓Complex [steps.XMLComplexStep-1607870066699]: 
            nodeName: row
            ↓Attribute [steps.XMLAttributeStep-1607870066702]: 
              nodeName: type
              nodeText: object
            ↓jIterator [steps.SimpleIteratorStep-1607870066705]: 
              expression: item
              ↓jElement [steps.ElementStep-1607870066708]: 
                expression: item
                nodeName: cell
                ↓Attribute [steps.XMLAttributeStep-1607870066711]: 
                  nodeName: type
                  nodeText: string
                ↓jAttribute [steps.AttributeStep-1607870066714]: 
                  expression: 'FirstRowHeader ? rows[0].get(index) : "col" + index'
                  nodeName: originalKeyName
↓SheetID [variables.RequestableVariable-1607870066717]: 
  comment: The Sheet id as found in the google  sheet URL
↓Range [variables.RequestableVariable-1607870066720]: 
  comment: The Cell range to read. (examples, A1:D7 or  Class Data!A2:E)
↓FirstRowHeader [variables.RequestableVariable-1607870066723]: 
  comment: Set this to true if the first row a header
  value: true
↓TestOk [core.TestCase]: 
  ↓SheetID [variables.TestCaseVariable-1607870066727]: 
    value: 1BxiMVs0XRA5nFMdKvBdBZjgmUUqptlbs74OgvE2upms
  ↓Range [variables.TestCaseVariable-1607870066730]: 
    value: Class Data!A2:E